#!/bin/bash

help()
{
	echo ""
	echo "Usage is: configure [options]"
	echo ""
	echo "Options: [defaults in brackets after descriptions]"
	echo ""
	echo "--prefix=PREFIX         install architecture-independent files in PREFIX"
	echo "                        [autodetect - same as mono]"
	echo "--mono-path=PATH    List of paths for searching libraries"
	echo "--build-release"
	echo "--build-debug"
	echo "--build-test"
	echo "--disable-gtk		  Disable all gtk# related targets [autodetect]"
	echo "--disable-swf		  Disable all swf related targets  [autodetect]"

}

check_for_exe_in_path()
{
	
	if ($1 --help &> /dev/null); then
		return 0;
	else
		return 1;
	fi
}

check_for_file_in_libs (){
	local tmp_libs="\"$mono_libs\""
	local lib_dir=""
	tmp_libs=`echo $tmp_libs | sed 's/:/\" \"/g'`
	
	for i in $tmp_libs; do
		lib_dir=`echo $i | sed 's/\"//g'`;
		if [ -f $lib_dir/$1 ]; then
			return 0;
		fi
	
	done
	return 1
}



##
# End of functions
##

##
# Begin of the main function
##

#default : debug build
mcs_flags="-debug"
mono_flags="--debug"
build_type="debug"

prefix=
interfaces="console"

for a in $*; do
	case $a in
		--help)
			help
			exit 0
			;;
		--prefix=*)
			prefix=`echo $a | sed 's/--prefix=//'`;
			;;
		--mono-path=*)
			mono_libs=$mono_libs:`echo $a | sed 's/--mono-path=//'`;
			;;
		--build-release)
			build_type=release;
			mcs_flags="-optimize+ ";
			mono_flags="-O=all";
			;;
		--build-test)
			build_type=testing;
			mcs_flags="-debug -r:NUnit.Framework";
			mono_flags="--debug";
			;;
		--build-debug)
			build_type=debug;
			mcs_flags="-debug"
			mono_flags="--debug"
			;;
		--disable-gtk)
			disable_build_gtk=yes;
			;;
		--disable-swf)
			disable_build_swf=yes;
			;;
		--disable-glade)
			disable_build_glade=yes;
			;;
		*)
			echo Unknown option: $a
			help
			exit 1
	esac
done


echo -n "checking for mono... "
if check_for_exe_in_path "mono"; then
	echo "yes";
else
	echo "Not found";
	echo "";
	echo "Mono Runtime was not found in your system.";
	echo "Please visit http://www.go-mono.com";
	echo "";
	exit 1;
fi


mono_home=/usr
#mono_home=`pkg-config --variable=prefix mono`
#mono_libs=`pkg-config --variable=libdir mono`

if (test $MONO_PATH); then
	mono_libs=$mono_libs:$MONO_PATH;
fi


echo $mono_libs

if test -z $prefix  ; then prefix=$mono_home;    fi

echo -n "checking for mcs... "
if check_for_exe_in_path "mcs"; then
	echo "yes";
else
	echo "Not found";
	echo "";
	echo "MCS Compiler was not found in your system.";
	echo "Please visit http://www.go-mono.com";
	echo "";
	exit 1;
fi

echo -n "checking for ICSharpCode.SharpZipLib... "
if (check_for_file_in_libs "ICSharpCode.SharpZipLib.dll"); then
	echo "yes";
else
	echo "ICSharpCode.SharpZipLib.dll was not found in your system";
	echo "Download it from:";
	echo "http://www.icsharpcode.net/OpenSource/SharpZipLib/Default.aspx";
	echo "";
	exit 1;
fi


if test -z $disable_build_gtk ; then 
	echo -n "checking for gtk#... ";
	if (check_for_file_in_libs "gtk-sharp.dll"); then
		echo  "yes";
		interfaces="$interfaces gtk"
	else
		echo "not found";
	fi
	
fi

if test -z $disable_build_glade; then
	echo -n "checking for glade#...";
	if (check_for_file_in_libs "glade-sharp.dll"); then
		echo "yes";
		interfaces="$interfaces glade"
	else
		echo "not found";
	fi
fi

#if test -z $disable_build_qt; then
#	echo -n "checking for qt#... ";
#	if (check_for_file_in_libs "Qt.dll"); then
#		echo "yes";
#		interfaces="$interfaces qt";
#	else
#		echo "not found";
#	fi
#fi
#if test -z $disable_build_swt; then
#	echo -n "checking for swt... ";
#	if (check_for_file_in_libs "ICSharpCode.SWT.dll"); then
#		echo "yes";
#		interfaces="$interfaces swt";
#	else
#		echo "not found";
#	fi	
#fi
if test -z $disable_build_swf; then
	echo -n "checking for swf... ";
	if (check_for_file_in_libs "System.Windows.Forms.dll"); then
		echo "yes";
		interfaces="$interfaces swf";
	else
		echo "not found";
	fi
fi
echo -n "checking for csdoc2html... "
if (check_for_exe_in_path "csdoc"); then
	echo "yes";
	comcsdoc="csdoc";
else
	echo "not found";
	comcsdoc="Not found in your system";
fi
	
echo ""

cat rules.make.in | sed "s/@INTERFACES@/$interfaces/g" | \
sed "s/@MCSFLAGS@/$mcs_flags/g"  | \
sed "s/@CSDOC@/$comcsdoc/g" | \
sed "s/@MONO_FLAGS@/$mono_flags/g" > rules.make

cadena=s/@PREFIX@/`echo $prefix | sed s/\\\\//\\\\\\\\\\\\//g`/g;
cadena_mono_path=s/@MONO_PATH@/`echo $mono_libs | sed s/\\\\//\\\\\\\\\\\\//g`/g;
cat rules.make | sed `echo $cadena` > rules.make
cat rules.make | sed `echo $cadena_mono_path` > rules.make

echo ""
echo "Configuration finished ! "
echo ""
echo "     Prefix:           $prefix"
echo "     User interfaces:  $interfaces"
echo "     Build type:       $build_type"
echo ""
echo "Now, type make to build the programs."
echo ""
exit 0;
